<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Code the Dream School</title>
	<atom:link href="/feed/" rel="self" type="application/rss+xml" />
	<link>https://learn.codethedream.org</link>
	<description></description>
	<lastBuildDate>Wed, 15 Jul 2020 22:55:51 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.9.3</generator>

<image>
	<url>https://learn.codethedream.org/wp-content/uploads/2019/10/cropped-CTD-Logo-2-32x32.png</url>
	<title>Code the Dream School</title>
	<link>https://learn.codethedream.org</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Commenting Your Code</title>
		<link>https://learn.codethedream.org/commenting-your-code/</link>
					<comments>https://learn.codethedream.org/commenting-your-code/#respond</comments>
		
		<dc:creator><![CDATA[Reid Russom]]></dc:creator>
		<pubDate>Wed, 15 Jul 2020 22:55:49 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://learnctd.wpengine.com/?p=406</guid>

					<description><![CDATA[Every person has a unique, individual style of writing their code. Think of it like writing a novel — every author has a different voice. Because of this, it can be jarring to read someone else&#8217;s code. We all think that our code makes perfect logical sense, but someone else might not. Programmers comment their]]></description>
										<content:encoded><![CDATA[
<p>Every person has a unique, individual style of writing their code. Think of it like writing a novel — every author has a different voice. Because of this, it can be jarring to read someone else&#8217;s code. We all think that our code makes perfect logical sense, but someone else might not.</p>



<p>Programmers comment their code to make up for this gap, and we expect our students to develop strong commenting practices. This will help you understand your own code as much as at helps us. You should be able to explain to another developer what every function, statement, or expression is doing. As you get into the habit of commenting, you&#8217;ll notice ways to reduce complexity and create more clean code. It will make you a better programmer. </p>



<h2>How to Comment Your Code</h2>



<p>Confused about how you should comment your code? Here&#8217;s an example: </p>



<p>&#8230;</p>



<p></p>
]]></content:encoded>
					
					<wfw:commentRss>https://learn.codethedream.org/commenting-your-code/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Web Basics II Week 1 Assignment</title>
		<link>https://learn.codethedream.org/web-basics-ii-week-1-assignment/</link>
					<comments>https://learn.codethedream.org/web-basics-ii-week-1-assignment/#respond</comments>
		
		<dc:creator><![CDATA[Reid Russom]]></dc:creator>
		<pubDate>Tue, 23 Jun 2020 17:29:19 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://learnctd.wpengine.com/?p=367</guid>

					<description><![CDATA[Challenge 1: Create a variable and print the value Create a variable and assign it any value: Use console.log to print out your variable: Final code: Output: Challenge 2: Create variables for your first and last name then print your full name Create a variable called firstName and assign your first name as the string]]></description>
										<content:encoded><![CDATA[
<h2>Challenge 1: Create a variable and print the value</h2>



<p>Create a variable and assign it any value:</p>



<pre class="wp-block-code"><code>const hello = 'hello world'</code></pre>



<p>Use <code>console.log</code> to print out your variable:</p>



<pre class="wp-block-code"><code>console.log(hello)</code></pre>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>const hello = 'hello world'

console.log(hello)</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>'hello world'</code></pre>



<h2>Challenge 2: Create variables for your first and last name then print your full name</h2>



<p>Create a variable called <code>firstName</code> and assign your first name as the string value:</p>



<pre class="wp-block-code"><code>const firstName = 'Elizabeth'</code></pre>



<p>Create a variable called <code>lastName</code> and assign your last name as the string value:</p>



<pre class="wp-block-code"><code>const lastName = 'Thompson'</code></pre>



<p>Use <code>console.log</code> to print out your full name:</p>



<p>Method 1: String Concatenation</p>



<pre class="wp-block-code"><code>console.log(firstName + ' ' + lastName)</code></pre>



<p>OR</p>



<p>Method 2: Template Literals</p>



<pre class="wp-block-code"><code>console.log(`${firstName} ${lastName}`)</code></pre>



<blockquote class="wp-block-quote"><p>Read more about <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">Template Literals</a></p></blockquote>



<h2>Final code:</h2>



<pre class="wp-block-code"><code>const firstName = 'Elizabeth'
const lastName = 'Thompson'

console.log(`${firstName} ${lastName}`)</code></pre>



<h2>Output:</h2>



<pre class="wp-block-code"><code>'Elizabeth Thompson'</code></pre>



<h2>Challenge 3: Calculate the total price rounded to two decimals</h2>



<p>Create a variable called <code>price</code> and assign a float value:</p>



<pre class="wp-block-code"><code>const price = 9.98</code></pre>



<p>Create a variable called <code>quantity</code> and assign an integer value:</p>



<pre class="wp-block-code"><code>const quantity = 5</code></pre>



<p>Create a variable called <code>total</code> and assign the value of <code>price</code> multiplied by <code>quantity</code>:</p>



<pre class="wp-block-code"><code>const total = price * quantity</code></pre>



<p>Use <code>console.log</code> to print out the <code>total</code> (rounded to the nearest two decimals):</p>



<pre class="wp-block-code"><code>const totalRounded = total.toFixed(2)
console.log(`$${totalRounded}`)</code></pre>



<blockquote class="wp-block-quote"><p>Read more about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed() method</a></p></blockquote>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>const price = 9.98
const quantity = 5
const total = price * quantity
const totalRounded = total.toFixed(2)

console.log(`$${totalRounded}`)</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>'$49.90'</code></pre>



<h2>Challenge 4: Declare a variable and conditionally assign it a value</h2>



<p>Create a variable called <code>weather</code> and assign &#8220;Rainy&#8221; as the string value:</p>



<pre class="wp-block-code"><code>const weather = 'Rainy'</code></pre>



<blockquote class="wp-block-quote"><p>Read more about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const">const statement</a></p></blockquote>



<p>Declare a variable called <code>message</code> and don&#8217;t assign it a value:</p>



<pre class="wp-block-code"><code>let message</code></pre>



<blockquote class="wp-block-quote"><p>Read more about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let">let statement</a></p></blockquote>



<p>Create a conditional statement that checks if <code>weather</code> is equal to &#8220;Sunny&#8221;:</p>



<pre class="wp-block-code"><code>if (weather === 'Sunny') {

}</code></pre>



<p>If <code>weather</code> meets the condition above, then set <code>message</code> equal to &#8220;Yay! It&#8217;s sunny outside&#8221;:</p>



<pre class="wp-block-code"><code>if (weather === 'Sunny') {
  message = "Yay! It's sunny outside"
}</code></pre>



<p>Add an <code>else</code> clause that sets <code>message</code> equal to &#8220;Aww! It&#8217;s not sunny outside&#8221;:</p>



<pre class="wp-block-code"><code>if (weather === 'Sunny') {
  message = "Yay! It's sunny outside"
} else {
  message = "Aww! It's not sunny outside"
}</code></pre>



<p>Use <code>console.log</code> to print out the value of <code>message</code>:</p>



<pre class="wp-block-code"><code>console.log(message)</code></pre>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>const weather = 'Rainy'
let message

if (weather === 'Sunny') {
  message = "Yay! It's sunny outside"
} else {
  message = "Aww! It's not sunny outside"
}

console.log(message)</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>"Yay! It's sunny outside"</code></pre>



<h2>Challenge 5: Create a function that returns any string</h2>



<p>Create a function called <code>myFunction</code> using the function keyword:</p>



<pre class="wp-block-code"><code>function myFunction() {

}</code></pre>



<p>Add a return statement in your function which returns a random string:</p>



<pre class="wp-block-code"><code>function myFunction() {
  return 'I called a function!'
}</code></pre>



<p>Use <code>console.log</code> to print out the output of <code>myFunction()</code>:</p>



<pre class="wp-block-code"><code>console.log(myFunction())</code></pre>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>function myFunction() {
  return 'I called a function!'
}

console.log(myFunction())</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>'I called a function!'</code></pre>



<h2>Challenge 6: Rewrite the function in Challenge #5 as an arrow function</h2>



<p>Create a function called <code>myArrowFunction</code> using the arrow syntax:</p>



<pre class="wp-block-code"><code>const myArrowFunction = () => {

}</code></pre>



<p>Add a return statement in your function which returns a random string:</p>



<p>Method 1: Explicit Return</p>



<pre class="wp-block-code"><code>const myArrowFunction = () => {
  return 'I called an arrow function!'
}</code></pre>



<p>OR</p>



<p>Method 2: Implicit Return</p>



<pre class="wp-block-code"><code>const myArrowFunction = () => 'I called an arrow function!'</code></pre>



<blockquote class="wp-block-quote"><p>Read more about <a href="https://medium.com/@bunlong/arrow-functions-return-rules-in-javascript-b63ed5f25994">arrow function return rules</a></p></blockquote>



<p>Use <code>console.log</code> to print out the output of <code>myArrowFunction()</code>:</p>



<pre class="wp-block-code"><code>console.log(myArrowFunction())</code></pre>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>const myArrowFunction = () => 'I called an arrow function!'

console.log(myArrowFunction())</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>'I called an arrow function!'</code></pre>



<h2>Challenge 7: Create a function returns a string in all uppercase</h2>



<p>Create a function called <code>stringToUpper</code>:</p>



<pre class="wp-block-code"><code>const stringToUpper = () => {}</code></pre>



<p>Add a parameter called <code>str</code> in your function signature:</p>



<pre class="wp-block-code"><code>const stringToUpper = (str) => {}</code></pre>



<p>Add a return statement in your function which returns the input string in all uppercase letters:</p>



<pre class="wp-block-code"><code>const stringToUpper = (str) => str.toUpperCase()</code></pre>



<blockquote class="wp-block-quote"><p>Read more about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">toUpperCase() method</a></p></blockquote>



<p>Use <code>console.log</code> to print out the output of <code>stringToUpper(str)</code>:</p>



<pre class="wp-block-code"><code>console.log(stringToUpper('why am i screaming'))</code></pre>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>const stringToUpper = (str) => str.toUpperCase()

console.log(stringToUpper('why am i screaming'))</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>'WHY AM I SCREAMING'</code></pre>



<h2>Challenge 8: Create a function that accepts a number argument and returns double its value</h2>



<p>Create a function called <code>multiplyByTwo</code>:</p>



<pre class="wp-block-code"><code>function multiplyByTwo() {

}</code></pre>



<p>Add a parameter called <code>number</code> in your function signature:</p>



<pre class="wp-block-code"><code>function multiplyByTwo(number) {

}</code></pre>



<p>Add a return statement in your function which returns <code>number</code> times two:</p>



<pre class="wp-block-code"><code>function multiplyByTwo(number) {
  return number * 2
}</code></pre>



<p>Create a variable called <code>num1</code> and assign it to the result of <code>multiplyByTwo(1)</code>:</p>



<pre class="wp-block-code"><code>const num1 = multiplyByTwo(1)</code></pre>



<p>Create a variable called <code>num2</code> and assign it to the result of <code>multiplyByTwo(5)</code>:</p>



<pre class="wp-block-code"><code>const num2 = multiplyByTwo(5)</code></pre>



<p>Create a variable called <code>num3</code> and assign it to the result of <code>multiplyByTwo(10)</code>:</p>



<pre class="wp-block-code"><code>const num3 = multiplyByTwo(10)</code></pre>



<p>Use <code>console.log</code> to print out the value of <code>num1</code>, <code>num2</code>, and <code>num3</code>:</p>



<pre class="wp-block-code"><code>console.log(num1, num2, num3)</code></pre>



<h3>Final code:</h3>



<pre class="wp-block-code"><code>function multiplyByTwo(number) {
  return number * 2
}

const num1 = multiplyByTwo(1)
const num2 = multiplyByTwo(5)
const num3 = multiplyByTwo(10)

console.log(num1, num2, num3)</code></pre>



<h3>Output:</h3>



<pre class="wp-block-code"><code>2, 10, 20</code></pre>
]]></content:encoded>
					
					<wfw:commentRss>https://learn.codethedream.org/web-basics-ii-week-1-assignment/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Week 2: Rails Routes and Resources</title>
		<link>https://learn.codethedream.org/rails-development-week2/</link>
					<comments>https://learn.codethedream.org/rails-development-week2/#respond</comments>
		
		<dc:creator><![CDATA[John McGarvey]]></dc:creator>
		<pubDate>Thu, 09 Apr 2020 17:18:46 +0000</pubDate>
				<category><![CDATA[Uncategorized]]></category>
		<guid isPermaLink="false">https://learnctd.wpengine.com/?p=169</guid>

					<description><![CDATA[Welcome to Week 2 of Rails Development! In this unit, we will: Finish learning the basics of Ruby on Rails Continue working in our blog application to learn about Rails scaffolding. Practice: Ruby on Rails Basics In this Treehouse library class, you&#8217;ll keep learning about creating applications using Rails. Please note that this one is]]></description>
										<content:encoded><![CDATA[
<p>Welcome to Week 2 of Rails Development! In this unit, we will: </p>



<ul><li>Finish learning the basics of Ruby on Rails</li><li>Continue working in our blog application to learn about Rails scaffolding. </li></ul>



<h2>Practice: Ruby on Rails Basics</h2>



<p>In this Treehouse library class, you&#8217;ll keep learning about creating applications using Rails. Please note that this one is not part of the track, but you should do it anyway. </p>



<p>Complete the lesson here: <a href="https://teamtreehouse.com/library/practice-ruby-on-rails-basics">https://teamtreehouse.com/library/practice-ruby-on-rails-basics</a></p>



<h2>Rails Routes and Resources</h2>



<p>When you do the second one, you will be working in the blog application.  As the instructor does each step, be sure you pause the video and do the same step to your version of the application.  You should test as you go along, to make sure what you have done is working.  The instructor will show several different ways to do things.  The best approach is not to erase, but to comment out the first methods the instructor shows before inserting the subsequent approaches, so that you can remember each way to do things.  Be sure you push to github.</p>



<p>Complete the lesson here: <a href="https://teamtreehouse.com/library/rails-routes-and-resources">https://teamtreehouse.com/library/rails-routes-and-resources</a></p>



<p>In summary, the assignments for week 2 are: </p>



<ol><li><strong>Complete <a href="https://teamtreehouse.com/library/practice-ruby-on-rails-basics">Practice: Ruby on Rails Basics</a></strong></li><li><strong>Complete <a href="https://teamtreehouse.com/library/rails-routes-and-resources">Rails Routes and Resources</a></strong></li></ol>



<p>And that&#8217;s it for the week! Remember to post your scrum updates and attend two mentor office hours sessions. </p>
]]></content:encoded>
					
					<wfw:commentRss>https://learn.codethedream.org/rails-development-week2/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Week 1: Introduction &#038; Rails Basics</title>
		<link>https://learn.codethedream.org/week-1-introduction-rails-basics/</link>
					<comments>https://learn.codethedream.org/week-1-introduction-rails-basics/#respond</comments>
		
		<dc:creator><![CDATA[Reid Russom]]></dc:creator>
		<pubDate>Wed, 01 Apr 2020 20:18:58 +0000</pubDate>
				<category><![CDATA[2020 Rails Development]]></category>
		<guid isPermaLink="false">https://learnctd.wpengine.com/?p=159</guid>

					<description><![CDATA[Welcome to the first week of Rails Development. In this unit, we will: Meet in our first mentor sessions Verify setups in Cloud9 or a local environment Begin learning Rails basics Everyone who is continuing onto the Rails section of the course should have received an invitation for a Treehouse account. Be sure you have]]></description>
										<content:encoded><![CDATA[
<p>Welcome to the first week of Rails Development. In this unit, we will: </p>



<ul><li>Meet in our first mentor sessions</li><li>Verify setups in Cloud9 or a local environment</li><li>Begin learning Rails basics</li></ul>



<p>Everyone who is continuing onto the Rails section of the course should have received an invitation for a Treehouse account.  Be sure you have accepted that invitation and logged into Treehouse.</p>



<p>To start, let&#8217;s make sure that we&#8217;re all ready to program in Rails.  We recommend that you set up your personal computer for development, so that you do not have to continue to use Cloud9.  However, not everyone has a machine that will support Rails development, so you may continue to use Cloud9 as necessary.  Some of you may have problems with the setup, and we&#8217;ll try to help you through it, but until you have completed the setup you can use Cloud9.  You can start your development on Cloud9 and switch to local development easily: You just clone the git repository to which you have stored your work onto your local machine.</p>



<p>You can configure your machine for Rails development if you have any of:</p>



<ul><li>A Mac with OSX</li><li>Ubuntu Linux</li><li>A WIndows 10 64bit machine with at least 8G of memory</li></ul>



<p>In each case, you need at least 3G of free disk space &#8212; more like 6G if using WIndows 64. Again, if you don&#8217;t have one of these kinds of machines, you can use Cloud9.</p>



<p>We have provided some information here as to how to do this in these slides:  <a rel="noreferrer noopener" aria-label="https://drive.google.com/open?id=1qUsSZT3hLjElEUSWqgU_rp8K4w6E9iyJh6h7lDHdAXo (opens in a new tab)" href="https://drive.google.com/open?id=1qUsSZT3hLjElEUSWqgU_rp8K4w6E9iyJh6h7lDHdAXo" target="_blank">Getting Started Slides </a>.  For Windows users only, there is also this video: <a rel="noreferrer noopener" aria-label=" (opens in a new tab)" href="https://drive.google.com/open?id=1V_zCjPWF1ORC3PF9uhRLxuVppH2B0lps" target="_blank">Win64 Rails Development</a> . For Linux and Mac users, there are videos in Treehouse that help with the setup.  Even if you are using Cloud9, take a look at the slides, make sure you have the &#8220;You&#8217;re On Rails&#8221; screen working for the blog application as described in the slides, and make sure that you have stored the start of that application in github.</p>



<h3>Rails Basics</h3>



<p>Now you&#8217;re ready to start Ruby on Rails. We will be working out of this short track:  <a href="https://teamtreehouse.com/tracks/back-end-2-rails" target="_blank" rel="noreferrer noopener" aria-label="ht (opens in a new tab)">ht</a><a href="https://teamtreehouse.com/tracks/back-end-2-rails">tps://teamtreehouse.com/tracks/back-end-2-rails</a> .  We will add to this track as needed.  As you watch the videos in this track, you will see the instructor develop an application called blog.  As you watch the video, each time the instructor makes a change or addition to the application, PAUSE the video and DUPLICATE the same steps for your blog application, so you have a version of the application that matches what the instructor is doing.  Sometimes the instructor will show several ways to do this.  The best practice is DO NOT ERASE.  Comment out the lines he is changing, and then make the changes the instructor describes.  That way you&#8217;ll remember the different ways you can do things.</p>



<p>For the week ending April 10 the tasks are:</p>



<ol><li>Complete your machine setup, unless using Cloud9.</li><li>Make sure the Rails screen for the application comes up in your browser.</li><li>Store the application in a github repository.  You will push your changes periodically during the course.</li><li><strong>Complete <a href="https://teamtreehouse.com/library/ruby-on-rails-5-basics" target="_blank" rel="noreferrer noopener" aria-label="R (opens in a new tab)">R</a><a href="https://teamtreehouse.com/library/ruby-on-rails-5-basics">uby on Rails 5 Basics</a>. </strong></li></ol>



<p>That&#8217;s it for this week! Remember to attend at least one mentor session this week and post your scrum update at the end of the week. </p>
]]></content:encoded>
					
					<wfw:commentRss>https://learn.codethedream.org/week-1-introduction-rails-basics/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
